package IOServer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import java.lang.Thread;

/**
 * 
 * @author Lukas Hofmann, Patrick Waltermann , Max Schulte
 *
 */
public class ServerVerwaltung {
  private GameManager[] spielerListe = new GameManager[3];
  private int i = 0;
  private int k = 0;
  private int deathcounter = 0;
  private boolean bosswin, endGame;
  private boolean s1=false;          //s1,s2,b : welche rolle ist schon vergeben, wird beim login benÃ¶tigt (s:Spieler b:Boss)
  private boolean s2=false;
  private boolean b=false;
  private int n = 0;             // n: Anzahl der eingeloggten Spieler
  cLoginUpdate cl1=new cLoginUpdate();
  GameManager spieler1=new GameManager();
  GameManager spieler2=new GameManager();
  GameManager boss=new GameManager();
  private Attack amP1, amP2, amP3;
  long last_time = System.nanoTime();
  /**
  * dt ist die Deltatime
  */
  private double dt;
  public ServerVerwaltung(){
    
    
  }
  
  public void sAttack(UUID id,Attack am){
    //überprüfen ob möglich
    int y = sGetNumberID(id);
    spielerListe[y].getpSelf().setMana(spielerListe[y].getpSelf().getMana()-am.getCost());
    if(am== spielerListe[y].getpSelf().getAmSpec1()) {
      spielerListe[y].getpSelf().getAmSpec1().resetCooldown();
    }
    if(am== spielerListe[y].getpSelf().getAmSpec2()) {
      spielerListe[y].getpSelf().getAmSpec2().resetCooldown();
    }
    for(int i = 0; i <= spielerListe.length; i++){
      GameManager local = spielerListe[i];
      if(am.getDamageBox().intersect(local.getpSelf().getHb())){
        local.getpSelf().setHitted(true);
        local.getpSelf().setHealth(local.getpSelf().getHealth()-spielerListe[y].getAmAllg().getDamage());
        if(local.getpSelf().getHealth()<=0){
          local.getpSelf().setDead(true);
          if (local.getpSelf().isBoss()){
            endGame = true;
            bosswin = true;
          }else if (deathcounter ==1){
            endGame = true;
            bosswin = false;
          }
          deathcounter++;
        }
        //TODO noch nie getetstet
      }
    }
  }
  /**
  * Ueberprueft die UUID mit der der Clients und liefert die interne ID zurueck
  * @param id UUID
  * @return NumberID
  */
  public int sGetNumberID(UUID id){
    int x = 5;//absichtlich falscher Int
    for(int i = 0; i <= spielerListe.length; i++){
      GameManager local = spielerListe[i];
      if(local.cGetUUID() == id){
        return local.cGetNumberID();
      }
    }
    return x;
  }
  /**
  * Initiert das Spiel
  */
  public void sStartGame(){
    Timer timer = new Timer();
    timer.schedule(new TimerTask() {
      public void run() {
        long time = System.nanoTime();
        dt = (double)((time - last_time));
        last_time = time;
        sUpdateHealth();
        sUpdateCooldown();
        sUpdateMana();
        for(int i = 0; i <= spielerListe.length; i++) {
          GameManager local = spielerListe[i];
          if (local.getpSelf().isAttacking()){ sAttack(local.cGetUUID(),local.getAmAllg());}
        }
      }
    }, 0, 100);
    
  }
  /**
  * 
  * @param g Der Client der die Methode aufruft
  * @return
  */
  public cLoginUpdate sLogin(cLoginUpdate clu){
    double z=Math.random();
    
    if (clu.getMode()==0){
      if (n==0&&z<=0.333333) {
        spielerIstBoss(clu);
      } // end of if
      else if (n==0&&z>0.333333&&z<=0.666666) {
        spielerIst1(clu);
      } // end of if
      else if (n==0&&z>0.666666) {
        spielerIst2(clu);
      } // end of if
    
      else if (n==1&&b&&z<=0.5) {
        spielerIst1(clu);
      } // end of if
      else if (n==1&&s1&&z<=0.5) {
        spielerIstBoss(clu);
      } // end of if
      else if (n==1&&s2&&z<=0.5) {
        spielerIstBoss(clu);
      } // end of if
    
      else if (n==1&&b&&z>0.5) {
        spielerIst2(clu);
      } // end of if
      else if (n==1&&s1&&z>0.5) {
        spielerIst2(clu);
      } // end of if
      else if (n==1&&s2&&z>0.5) {
        spielerIst1(clu);
      } // end of if
    
      else if (n==2&&s1&&s2) {
        spielerIstBoss(clu);
      } // end of if
      else if (n==2&&b&&s1) {
        spielerIst2(clu);
      } // end of if
      else if (n==2&&b&&s2) {
        spielerIst1(clu);
      } // end of if
    }
    else if (clu.getMode()==1){
      for (int l=0; l<spielerListe.length;l++){
        if (spielerListe[l].cGetUUID()==clu.getUUID()){
          //spielerListe[l].charakter=clu.getCharakter();                //Charakter in GM nicht enthalten. vergessen oder Absicht?
        }
      }
    }
    
    return(clu) ;
  }
  
  public void login2(){
    if (n==3) {
        //double aktZeit=System.currentTimeMillis();
        String s="Alle Spieler eingeloggt! Start in 15s!";
        /*for (int l=0; l<spielerListe.length; l++ ){
        spielerListe[l].zeigen(s);
        spielerListe[l].zeigen(s);
        }*/
        try{
          Thread.sleep(15000);
        }catch (InterruptedException e){}
        //Spielstart
        
        for (int j=0; j<spielerListe.length; j++){
          spielerListe[j].spielstart();
        }
    } // end of if
      
  }
  
  
  
  /**
  *  spielerIstBoss,spielerIst1,spielerIst2 werden beim Login aufgerufen,
  *  getrennt für bessere Übersichtlichkeit
  * @param g Gamemanager, der die Login funktion aufgerufen hat und sich gerade einloggt
  */
  private void spielerIstBoss(cLoginUpdate clu){
    spielerListe[0]=new GameManager();
    //spielerListe[0].UUID=clu.getUUID();
    n++;
    b=true;
    clu.setIstBoss(true);
    clu.modeErhoehen();
  }
  private void spielerIst1(cLoginUpdate clu){
    spielerListe[1]=new GameManager();
    //spielerListe[1].UUID=clu.getUUID();
    n++;
    s1=true;
    clu.setIstBoss(false);
    clu.modeErhoehen();
  }
  private void spielerIst2(cLoginUpdate clu){
    spielerListe[2]=new GameManager();
    //spielerListe[2].UUID=clu.getUUID();
    n++;
    s2=true;
    clu.setIstBoss(false);           
    clu.modeErhoehen();
  }
  
  
  
  //private void setSkin (int Skin, Gamemanager g){   //skin entweder int oder enum
  //  g.setSkin(skin);
  //}
  
  
  
  /**
  * Methode die vom Client aufgerufen wird  um den austritt aus der Session zu signalisieren
  * @param gameManager Client, der sich ausgeloggt hat
  * allen spielern wird gesagt, wer sich ausgeloggt hat, danach kehren alle Spieler zum HHauptbildschirm zurück
  */
  public void sLogout(GameManager gameManager) {
    String s="";
    if (gameManager.cGetUUID()==spielerListe[1].cGetUUID()) {
      s="Spieler 1";
    } // end of if
    if (gameManager.cGetUUID()==spielerListe[2].cGetUUID()) {
      s="Spieler 2";
    } // end of if
    if (gameManager.cGetUUID()==spielerListe[0].cGetUUID()) {
      s="Boss";
    } // end of if
    spielerListe[0].logout(s);
    spielerListe[1].logout(s);
    spielerListe[2].logout(s);
  }
  /**
  * Wird voraussichtlich weggelassen
  */
  public void sMove() {
    //prÃ¼ft ob mÃ¶glich
    
  }
  /**
  * generelle Update Methode
  */
  public SUpdate sGetUpdateS(){
    SUpdate r = new SUpdate(spielerListe[0].getpSelf(),spielerListe[1].getpSelf(),spielerListe[2].getpSelf(), bosswin,endGame);
    return r;
  }
  public void sSetUpdateC(CUpdate update){
    int y = sGetNumberID(update.getId());
    spielerListe[y].getpSelf().getHb().setPos(update.getPlayer().getHb().getPos());
    spielerListe[y].setAmAllg(update.getAmAllg());
    spielerListe[y].getpSelf().setJumping(update.getPlayer().isJumping());
    spielerListe[y].getpSelf().setLookingRight(update.getPlayer().isLookingRight());
    spielerListe[y].getpSelf().setAttacking(update.getPlayer().isAttacking());
    spielerListe[y].getpSelf().setSprinting(update.getPlayer().isSprinting());
  }
  public void sUpdateHealth() {
    for (int i = 0; i <= spielerListe.length; i++) {
      GameManager local = spielerListe[i];
      if (local.getpSelf().getHealth() < 100) {
        local.getpSelf().setHealth(local.getpSelf().getHealth() + dt/1000000000 *0.01* local.getpSelf().getRegSpeed());
      }
    }
  }
  public void sUpdateCooldown() {
    for (int i = 0; i <= spielerListe.length; i++) {
      GameManager local = spielerListe[i];
      if(local.getpSelf().getAmSpec1().getCooldown()>0){
        local.getpSelf().getAmSpec1().setCooldown(local.getpSelf().getAmSpec1().getCooldown()-dt/1000000000);
      }
      else {local.getpSelf().getAmSpec1().setCooldown(0);}
      if(local.getpSelf().getAmSpec2().getCooldown()>0){
        local.getpSelf().getAmSpec2().setCooldown(local.getpSelf().getAmSpec2().getCooldown()-dt/1000000000);
      }
      else {local.getpSelf().getAmSpec2().setCooldown(0);}
    }
  }
  public void sUpdateMana() {
    for (int i = 0; i <= spielerListe.length; i++) {
      GameManager local = spielerListe[i];
      if (local.getpSelf().getMana() < 100) {
        local.getpSelf().setMana(local.getpSelf().getMana() + dt/1000000000 *0.01* local.getpSelf().getRegSpeed());
      }
    }
  }
  
}
